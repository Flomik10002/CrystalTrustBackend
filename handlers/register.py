import re
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from sqlalchemy import select

from database.engine import SessionLocal
from database.models import User
from services.registration import (
    insert_pending_registration,
    verify_registration_code,
    complete_user_registration,
)
from utils import generate_code, is_admin

router = Router()

class RegistrationState(StatesGroup):
    awaiting_password = State()

@router.message(Command("register_nickname"))
async def register_by_admin(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    args = message.text.strip().split()
    if len(args) != 2:
        return await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /register_nickname <–Ω–∏–∫>")

    nickname = args[1]
    async with SessionLocal() as db:
        taken = await db.scalar(select(User.id).where(User.nickname == nickname))
        if taken:
            return await message.reply("‚ùå –≠—Ç–æ—Ç –Ω–∏–∫ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")

        code = generate_code()
        await insert_pending_registration(db, nickname, code, message.from_user.id)

    await message.answer(f"‚úÖ –ö–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è *{nickname}*:\n`{code}`", parse_mode="Markdown")


@router.message(Command("register"))
async def register_user(message: types.Message, state: FSMContext):
    args = message.text.strip().split()
    if len(args) != 2:
        return await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /register <–∫–æ–¥>")

    code = args[1]
    async with SessionLocal() as db:
        if not await verify_registration_code(db, code):
            return await message.answer("‚ùå –ö–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª.")

    await state.update_data(code=code)
    await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ø–∞—Ä–æ–ª—å:")
    await state.set_state(RegistrationState.awaiting_password)


@router.message(RegistrationState.awaiting_password)
async def receive_password(message: types.Message, state: FSMContext):
    password = message.text.strip()
    if len(password) < 8:
        return await message.answer("‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 8 —Å–∏–º–≤–æ–ª–æ–≤.")

    data = await state.get_data()
    code = data.get("code")
    if not code:
        await state.clear()
        return await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    async with SessionLocal() as db:
        ok, res = await complete_user_registration(db, message.from_user.id, code, password)

    if ok:
        await message.answer(f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CrystalTrust, *{res['nickname']}*!", parse_mode="Markdown")
    else:
        await message.answer(f"‚ùå {res}")

    await state.clear()